name: CI/CD Pipeline
on:
  push:
    branches: [ test ]

jobs: # This comment for test CI/CI and final correction
  continuous-integration:
    runs-on: ubuntu-latest

    steps:
      # Step 1
      - uses: actions/checkout@v2
      # Step 2
      - name: Set up Python 3.8.10
        uses: actions/setup-python@v2
        with:
          python-version: 3.8.10
      # Step 3
      - name: Build and run docker container
        run: |
            docker-compose -f docker-compose.yml -f docker-compose.staging.yml up --build -d --remove-orphans

      - name: run migrations
        run: |
            docker-compose -f docker-compose.yml -f docker-compose.staging.yml exec -T web python manage.py migrate --noinput
      # Step 4
      - name: Run unit Test on docker container
        run: sudo docker-compose -f docker-compose.yml -f docker-compose.staging.yml run -T --user="root" web sh -c "python manage.py test"
      # Step 5
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3
        env:
          ENV: ${{ github.SQL_HOST }}
          DEBUG: True
          DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SQL_ENGINE: ${{ secrets.SQL_ENGINE }}
          DATABASE: postgres
          SQL_DB: postgres
          SQL_USER: postgres
          SQL_PASSWORD: postgres
          SQL_HOST: postgres
          SQL_PORT: ${{ secrets.SQL_PORT }}

  continuous-deployment:
    runs-on: ubuntu-latest
    needs: [continuous-integration]
    if: github.ref == 'refs/heads/main'
    steps:
     # Step 1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3
     # Step 2
      - name: Create CodeDeploy Deployment
        id: deploy
        run: |
          aws deploy create-deployment \
            --application-name Code-Deploy-Application \
            --deployment-group-name yattblog_group_deploy \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }}
